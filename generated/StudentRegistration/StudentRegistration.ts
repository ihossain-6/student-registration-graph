// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class StudentAdded extends ethereum.Event {
  get params(): StudentAdded__Params {
    return new StudentAdded__Params(this);
  }
}

export class StudentAdded__Params {
  _event: StudentAdded;

  constructor(event: StudentAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get email(): string {
    return this._event.parameters[2].value.toString();
  }

  get imgHash(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class StudentRegistration__seeStudentResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get email(): string {
    return this[2].toString();
  }

  get imgHash(): string {
    return this[3].toString();
  }
}

export class StudentRegistration extends ethereum.SmartContract {
  static bind(address: Address): StudentRegistration {
    return new StudentRegistration("StudentRegistration", address);
  }

  seeAuthority(): Address {
    let result = super.call("seeAuthority", "seeAuthority():(address)", []);

    return result[0].toAddress();
  }

  try_seeAuthority(): ethereum.CallResult<Address> {
    let result = super.tryCall("seeAuthority", "seeAuthority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seeStudent(id: BigInt): StudentRegistration__seeStudentResultValue0Struct {
    let result = super.call(
      "seeStudent",
      "seeStudent(uint256):((uint256,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<StudentRegistration__seeStudentResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_seeStudent(
    id: BigInt
  ): ethereum.CallResult<StudentRegistration__seeStudentResultValue0Struct> {
    let result = super.tryCall(
      "seeStudent",
      "seeStudent(uint256):((uint256,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<StudentRegistration__seeStudentResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStudentCall extends ethereum.Call {
  get inputs(): AddStudentCall__Inputs {
    return new AddStudentCall__Inputs(this);
  }

  get outputs(): AddStudentCall__Outputs {
    return new AddStudentCall__Outputs(this);
  }
}

export class AddStudentCall__Inputs {
  _call: AddStudentCall;

  constructor(call: AddStudentCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get email(): string {
    return this._call.inputValues[2].value.toString();
  }

  get imgHash(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddStudentCall__Outputs {
  _call: AddStudentCall;

  constructor(call: AddStudentCall) {
    this._call = call;
  }
}
